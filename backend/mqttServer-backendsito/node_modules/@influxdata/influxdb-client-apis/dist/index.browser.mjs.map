{"version":3,"file":"index.browser.mjs","sources":["../src/APIBase.ts","../src/generated/RootAPI.ts","../src/generated/AuthorizationsAPI.ts","../src/generated/BackupAPI.ts","../src/generated/BucketsAPI.ts","../src/generated/ChecksAPI.ts","../src/generated/ConfigAPI.ts","../src/generated/DashboardsAPI.ts","../src/generated/DbrpsAPI.ts","../src/generated/DebugAPI.ts","../src/generated/DeleteAPI.ts","../src/generated/FlagsAPI.ts","../src/generated/HealthAPI.ts","../src/generated/LabelsAPI.ts","../src/generated/LegacyAPI.ts","../src/generated/MeAPI.ts","../src/generated/MetricsAPI.ts","../src/generated/NotificationEndpointsAPI.ts","../src/generated/NotificationRulesAPI.ts","../src/generated/OrgsAPI.ts","../src/generated/PingAPI.ts","../src/generated/QueryAPI.ts","../src/generated/ReadyAPI.ts","../src/generated/RemotesAPI.ts","../src/generated/ReplicationsAPI.ts","../src/generated/ResourcesAPI.ts","../src/generated/RestoreAPI.ts","../src/generated/ScrapersAPI.ts","../src/generated/ScriptsAPI.ts","../src/generated/SetupAPI.ts","../src/generated/SigninAPI.ts","../src/generated/SignoutAPI.ts","../src/generated/SourcesAPI.ts","../src/generated/StacksAPI.ts","../src/generated/TasksAPI.ts","../src/generated/TelegrafAPI.ts","../src/generated/TelegrafsAPI.ts","../src/generated/TemplatesAPI.ts","../src/generated/UsersAPI.ts","../src/generated/VariablesAPI.ts","../src/generated/WriteAPI.ts","../src/custom/FluxScriptInvocationAPI.ts"],"sourcesContent":["// this is effectively a clone of\nimport {\n  InfluxDB,\n  Transport,\n  SendOptions,\n  Headers,\n} from '@influxdata/influxdb-client'\n\n// used only in browser builds\ndeclare function btoa(plain: string): string\n\nexport interface RequestOptions {\n  /** HTTP request headers */\n  headers?: {[key: string]: string}\n  /**\n   * Informs about a start of response processing.\n   * @param headers - response HTTP headers\n   * @param statusCode - response status code\n   */\n  responseStarted?: (headers: Headers, statusCode?: number) => void\n}\n\nfunction base64(value: string): string {\n  return typeof btoa === 'function' // browser (window,worker) environment\n    ? btoa(value)\n    : Buffer.from(value, 'binary').toString('base64')\n}\n/**\n * Base class for all apis.\n */\nexport class APIBase {\n  transport: Transport\n  /**\n   * Initializes transport to communicate with InfluxDB.\n   * @param influxDB - the main InfluxDB client object\n   */\n  constructor(influxDB: InfluxDB) {\n    if (!influxDB) throw new Error('No influxDB supplied!')\n    if (!influxDB.transport) throw new Error('No transport supplied!')\n    this.transport = influxDB.transport\n  }\n\n  queryString(request: any, params: string[]): string {\n    if (request && params) {\n      return params.reduce((acc, key) => {\n        const val = request[key]\n        if (val !== undefined && val !== null) {\n          acc += acc ? '&' : '?'\n          acc += encodeURIComponent(key) + '=' + encodeURIComponent(String(val))\n        }\n        return acc\n      }, '')\n    } else {\n      return ''\n    }\n  }\n\n  request(\n    method: string,\n    path: string,\n    request: any = {},\n    requestOptions?: RequestOptions,\n    mediaType?: string\n  ): Promise<any> {\n    const sendOptions: SendOptions = {\n      ...requestOptions,\n      method,\n    }\n    if (mediaType) {\n      ;(sendOptions.headers || (sendOptions.headers = {}))[\n        'content-type'\n      ] = mediaType\n    }\n    if (request.auth) {\n      const value = `${request.auth.user}:${request.auth.password}`\n      ;(sendOptions.headers || (sendOptions.headers = {}))[\n        'authorization'\n      ] = `Basic ${base64(value)}`\n    }\n    return this.transport.request(\n      path,\n      request.body ? request.body : '',\n      sendOptions,\n      requestOptions?.responseStarted\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Routes} from './types'\n\nexport interface GetRoutesRequest {}\n/**\n * Root API\n */\nexport class RootAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates RootAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all top level routes.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetRoutes }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getRoutes(\n    request?: GetRoutesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Routes> {\n    return this.base.request('GET', `/api/v2/`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Authorization,\n  AuthorizationPostRequest,\n  AuthorizationUpdateRequest,\n  Authorizations,\n} from './types'\n\nexport interface GetAuthorizationsRequest {\n  /** Only show authorizations that belong to a user ID. */\n  userID?: string\n  /** Only show authorizations that belong to a user name. */\n  user?: string\n  /** Only show authorizations that belong to an organization ID. */\n  orgID?: string\n  /** Only show authorizations that belong to a organization name. */\n  org?: string\n}\nexport interface PostAuthorizationsRequest {\n  /** Authorization to create */\n  body: AuthorizationPostRequest\n}\nexport interface GetAuthorizationsIDRequest {\n  /** The ID of the authorization to get. */\n  authID: string\n}\nexport interface PatchAuthorizationsIDRequest {\n  /** The ID of the authorization to update. */\n  authID: string\n  /** Authorization to update */\n  body: AuthorizationUpdateRequest\n}\nexport interface DeleteAuthorizationsIDRequest {\n  /** The ID of the authorization to delete. */\n  authID: string\n}\n/**\n * Authorizations API\n */\nexport class AuthorizationsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates AuthorizationsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all authorizations.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetAuthorizations }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getAuthorizations(\n    request?: GetAuthorizationsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorizations> {\n    return this.base.request(\n      'GET',\n      `/api/v2/authorizations${this.base.queryString(request, [\n        'userID',\n        'user',\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create an authorization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostAuthorizations }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postAuthorizations(\n    request: PostAuthorizationsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorization> {\n    return this.base.request(\n      'POST',\n      `/api/v2/authorizations`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve an authorization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetAuthorizationsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getAuthorizationsID(\n    request: GetAuthorizationsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorization> {\n    return this.base.request(\n      'GET',\n      `/api/v2/authorizations/${request.authID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update an authorization to be active or inactive.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchAuthorizationsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchAuthorizationsID(\n    request: PatchAuthorizationsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorization> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/authorizations/${request.authID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete an authorization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteAuthorizationsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteAuthorizationsID(\n    request: DeleteAuthorizationsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/authorizations/${request.authID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {MetadataBackup} from './types'\n\nexport interface GetBackupKVRequest {}\nexport interface GetBackupMetadataRequest {}\nexport interface GetBackupShardIdRequest {\n  /** The shard ID. */\n  shardID: number\n  /** Earliest time to include in the snapshot. RFC3339 format. */\n  since?: string\n}\n/**\n * Backup API\n */\nexport class BackupAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates BackupAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Download snapshot of metadata stored in the server's embedded KV store. Should not be used in versions greater than 2.1.x, as it doesn't include metadata stored in embedded SQL.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetBackupKV }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBackupKV(\n    request?: GetBackupKVRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/backup/kv`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Download snapshot of all metadata in the server.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetBackupMetadata }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBackupMetadata(\n    request?: GetBackupMetadataRequest,\n    requestOptions?: RequestOptions\n  ): Promise<MetadataBackup> {\n    return this.base.request(\n      'GET',\n      `/api/v2/backup/metadata`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Download snapshot of all TSM data in a shard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetBackupShardId }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBackupShardId(\n    request: GetBackupShardIdRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/backup/shards/${request.shardID}${this.base.queryString(\n        request,\n        ['since']\n      )}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  Bucket,\n  Buckets,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  PatchBucketRequest,\n  PostBucketRequest,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n} from './types'\n\nexport interface GetBucketsRequest {\n  offset?: number\n  limit?: number\n  /** Resource ID to seek from. Results are not inclusive of this ID. Use `after` instead of `offset`.\n   */\n  after?: string\n  /** The name of the organization. */\n  org?: string\n  /** The organization ID. */\n  orgID?: string\n  /** Only returns buckets with a specific name. */\n  name?: string\n  /** Only returns buckets with a specific ID. */\n  id?: string\n}\nexport interface PostBucketsRequest {\n  /** Bucket to create */\n  body: PostBucketRequest\n}\nexport interface GetBucketsIDRequest {\n  /** The bucket ID. */\n  bucketID: string\n}\nexport interface PatchBucketsIDRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** Bucket update to apply */\n  body: PatchBucketRequest\n}\nexport interface DeleteBucketsIDRequest {\n  /** The ID of the bucket to delete. */\n  bucketID: string\n}\nexport interface GetBucketsIDLabelsRequest {\n  /** The bucket ID. */\n  bucketID: string\n}\nexport interface PostBucketsIDLabelsRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteBucketsIDLabelsIDRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\nexport interface GetBucketsIDMembersRequest {\n  /** The bucket ID. */\n  bucketID: string\n}\nexport interface PostBucketsIDMembersRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteBucketsIDMembersIDRequest {\n  /** The ID of the member to remove. */\n  userID: string\n  /** The bucket ID. */\n  bucketID: string\n}\nexport interface GetBucketsIDOwnersRequest {\n  /** The bucket ID. */\n  bucketID: string\n}\nexport interface PostBucketsIDOwnersRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteBucketsIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The bucket ID. */\n  bucketID: string\n}\n/**\n * Buckets API\n */\nexport class BucketsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates BucketsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all buckets.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetBuckets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBuckets(\n    request?: GetBucketsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Buckets> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'after',\n        'org',\n        'orgID',\n        'name',\n        'id',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostBuckets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postBuckets(\n    request: PostBucketsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Bucket> {\n    return this.base.request(\n      'POST',\n      `/api/v2/buckets`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetBucketsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBucketsID(\n    request: GetBucketsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Bucket> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets/${request.bucketID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchBucketsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchBucketsID(\n    request: PatchBucketsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Bucket> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/buckets/${request.bucketID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteBucketsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteBucketsID(\n    request: DeleteBucketsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/buckets/${request.bucketID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetBucketsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBucketsIDLabels(\n    request: GetBucketsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets/${request.bucketID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostBucketsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postBucketsIDLabels(\n    request: PostBucketsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/buckets/${request.bucketID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteBucketsIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteBucketsIDLabelsID(\n    request: DeleteBucketsIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/buckets/${request.bucketID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all users with member privileges for a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetBucketsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBucketsIDMembers(\n    request: GetBucketsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets/${request.bucketID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostBucketsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postBucketsIDMembers(\n    request: PostBucketsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/buckets/${request.bucketID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteBucketsIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteBucketsIDMembersID(\n    request: DeleteBucketsIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/buckets/${request.bucketID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetBucketsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBucketsIDOwners(\n    request: GetBucketsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets/${request.bucketID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostBucketsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postBucketsIDOwners(\n    request: PostBucketsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/buckets/${request.bucketID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteBucketsIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteBucketsIDOwnersID(\n    request: DeleteBucketsIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/buckets/${request.bucketID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Check,\n  CheckPatch,\n  Checks,\n  FluxResponse,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  PostCheck,\n} from './types'\n\nexport interface GetChecksRequest {\n  offset?: number\n  limit?: number\n  /** Only show checks that belong to a specific organization ID. */\n  orgID: string\n}\nexport interface CreateCheckRequest {\n  /** Check to create */\n  body: PostCheck\n}\nexport interface GetChecksIDRequest {\n  /** The check ID. */\n  checkID: string\n}\nexport interface PutChecksIDRequest {\n  /** The check ID. */\n  checkID: string\n  /** Check update to apply */\n  body: Check\n}\nexport interface PatchChecksIDRequest {\n  /** The check ID. */\n  checkID: string\n  /** Check update to apply */\n  body: CheckPatch\n}\nexport interface DeleteChecksIDRequest {\n  /** The check ID. */\n  checkID: string\n}\nexport interface GetChecksIDLabelsRequest {\n  /** The check ID. */\n  checkID: string\n}\nexport interface PostChecksIDLabelsRequest {\n  /** The check ID. */\n  checkID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteChecksIDLabelsIDRequest {\n  /** The check ID. */\n  checkID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\nexport interface GetChecksIDQueryRequest {\n  /** The check ID. */\n  checkID: string\n}\n/**\n * Checks API\n */\nexport class ChecksAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ChecksAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all checks.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetChecks }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getChecks(\n    request: GetChecksRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Checks> {\n    return this.base.request(\n      'GET',\n      `/api/v2/checks${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'orgID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add new check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/CreateCheck }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  createCheck(\n    request: CreateCheckRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Check> {\n    return this.base.request(\n      'POST',\n      `/api/v2/checks`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetChecksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getChecksID(\n    request: GetChecksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Check> {\n    return this.base.request(\n      'GET',\n      `/api/v2/checks/${request.checkID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PutChecksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putChecksID(\n    request: PutChecksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Check> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/checks/${request.checkID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchChecksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchChecksID(\n    request: PatchChecksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Check> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/checks/${request.checkID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteChecksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteChecksID(\n    request: DeleteChecksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/checks/${request.checkID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetChecksIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getChecksIDLabels(\n    request: GetChecksIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/checks/${request.checkID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostChecksIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postChecksIDLabels(\n    request: PostChecksIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/checks/${request.checkID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete label from a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteChecksIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteChecksIDLabelsID(\n    request: DeleteChecksIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/checks/${request.checkID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve a check query.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetChecksIDQuery }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getChecksIDQuery(\n    request: GetChecksIDQueryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<FluxResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/checks/${request.checkID}/query`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Config} from './types'\n\nexport interface GetConfigRequest {}\n/**\n * Config API\n */\nexport class ConfigAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ConfigAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get the run-time configuration of the instance.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetConfig }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getConfig(\n    request?: GetConfigRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Config> {\n    return this.base.request('GET', `/api/v2/config`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  Cell,\n  CellUpdate,\n  CellWithViewProperties,\n  Cells,\n  CreateCell,\n  CreateDashboardRequest,\n  Dashboard,\n  DashboardWithViewProperties,\n  Dashboards,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  View,\n} from './types'\n\nexport interface GetDashboardsIDRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** Includes the cell view properties in the response if set to `properties` */\n  include?: string\n}\nexport interface PatchDashboardsIDRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** Patching of a dashboard */\n  body: {\n    /** optional, when provided will replace the name */\n    name?: string\n    /** optional, when provided will replace the description */\n    description?: string\n    /** optional, when provided will replace all existing cells with the cells provided */\n    cells?: CellWithViewProperties\n  }\n}\nexport interface DeleteDashboardsIDRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n}\nexport interface PostDashboardsIDCellsRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** Cell that will be added */\n  body: CreateCell\n}\nexport interface PutDashboardsIDCellsRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** entity body */\n  body: Cells\n}\nexport interface PatchDashboardsIDCellsIDRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** The ID of the cell to update. */\n  cellID: string\n  /** entity body */\n  body: CellUpdate\n}\nexport interface DeleteDashboardsIDCellsIDRequest {\n  /** The ID of the dashboard to delete. */\n  dashboardID: string\n  /** The ID of the cell to delete. */\n  cellID: string\n}\nexport interface GetDashboardsIDCellsIDViewRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** The cell ID. */\n  cellID: string\n}\nexport interface PatchDashboardsIDCellsIDViewRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** The ID of the cell to update. */\n  cellID: string\n  /** entity body */\n  body: View\n}\nexport interface GetDashboardsIDLabelsRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface PostDashboardsIDLabelsRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteDashboardsIDLabelsIDRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\nexport interface GetDashboardsIDMembersRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface PostDashboardsIDMembersRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteDashboardsIDMembersIDRequest {\n  /** The ID of the member to remove. */\n  userID: string\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface GetDashboardsIDOwnersRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface PostDashboardsIDOwnersRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteDashboardsIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface GetDashboardsRequest {\n  offset?: number\n  limit?: number\n  descending?: any\n  /** A user identifier. Returns only dashboards where this user has the `owner` role. */\n  owner?: string\n  /** The column to sort by. */\n  sortBy?: string\n  /** A list of dashboard identifiers. Returns only the listed dashboards. If both `id` and `owner` are specified, only `id` is used. */\n  id?: any\n  /** The identifier of the organization. */\n  orgID?: string\n  /** The name of the organization. */\n  org?: string\n}\nexport interface PostDashboardsRequest {\n  /** Dashboard to create */\n  body: CreateDashboardRequest\n}\n/**\n * Dashboards API\n */\nexport class DashboardsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates DashboardsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Retrieve a Dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDashboardsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsID(\n    request: GetDashboardsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboard | DashboardWithViewProperties> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}${this.base.queryString(\n        request,\n        ['include']\n      )}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchDashboardsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchDashboardsID(\n    request: PatchDashboardsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboard> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/dashboards/${request.dashboardID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteDashboardsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsID(\n    request: DeleteDashboardsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a dashboard cell.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostDashboardsIDCells }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboardsIDCells(\n    request: PostDashboardsIDCellsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Cell> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards/${request.dashboardID}/cells`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Replace cells in a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PutDashboardsIDCells }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putDashboardsIDCells(\n    request: PutDashboardsIDCellsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboard> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/dashboards/${request.dashboardID}/cells`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update the non-positional information related to a cell.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchDashboardsIDCellsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchDashboardsIDCellsID(\n    request: PatchDashboardsIDCellsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Cell> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/dashboards/${request.dashboardID}/cells/${request.cellID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a dashboard cell.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteDashboardsIDCellsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsIDCellsID(\n    request: DeleteDashboardsIDCellsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}/cells/${request.cellID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve the view for a cell.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDashboardsIDCellsIDView }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsIDCellsIDView(\n    request: GetDashboardsIDCellsIDViewRequest,\n    requestOptions?: RequestOptions\n  ): Promise<View> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}/cells/${request.cellID}/view`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update the view for a cell.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchDashboardsIDCellsIDView }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchDashboardsIDCellsIDView(\n    request: PatchDashboardsIDCellsIDViewRequest,\n    requestOptions?: RequestOptions\n  ): Promise<View> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/dashboards/${request.dashboardID}/cells/${request.cellID}/view`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * List all labels for a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDashboardsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsIDLabels(\n    request: GetDashboardsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostDashboardsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboardsIDLabels(\n    request: PostDashboardsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards/${request.dashboardID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteDashboardsIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsIDLabelsID(\n    request: DeleteDashboardsIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all dashboard members.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDashboardsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsIDMembers(\n    request: GetDashboardsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostDashboardsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboardsIDMembers(\n    request: PostDashboardsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards/${request.dashboardID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteDashboardsIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsIDMembersID(\n    request: DeleteDashboardsIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all dashboard owners.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDashboardsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsIDOwners(\n    request: GetDashboardsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostDashboardsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboardsIDOwners(\n    request: PostDashboardsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards/${request.dashboardID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteDashboardsIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsIDOwnersID(\n    request: DeleteDashboardsIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all dashboards.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDashboards }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboards(\n    request?: GetDashboardsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboards> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'descending',\n        'owner',\n        'sortBy',\n        'id',\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostDashboards }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboards(\n    request: PostDashboardsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboard | DashboardWithViewProperties> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {DBRP, DBRPCreate, DBRPGet, DBRPUpdate, DBRPs} from './types'\n\nexport interface GetDBRPsRequest {\n  /** Specifies the organization ID to filter on */\n  orgID?: string\n  /** Specifies the organization name to filter on */\n  org?: string\n  /** Specifies the mapping ID to filter on */\n  id?: string\n  /** Specifies the bucket ID to filter on */\n  bucketID?: string\n  /** Specifies filtering on default */\n  default?: any\n  /** Specifies the database to filter on */\n  db?: string\n  /** Specifies the retention policy to filter on */\n  rp?: string\n}\nexport interface PostDBRPRequest {\n  /** The database retention policy mapping to add */\n  body: DBRPCreate\n}\nexport interface GetDBRPsIDRequest {\n  /** The database retention policy mapping ID */\n  dbrpID: string\n  /** Specifies the organization ID of the mapping */\n  orgID?: string\n  /** Specifies the organization name of the mapping */\n  org?: string\n}\nexport interface PatchDBRPIDRequest {\n  /** The database retention policy mapping. */\n  dbrpID: string\n  /** Database retention policy update to apply */\n  body: DBRPUpdate\n  /** Specifies the organization ID of the mapping */\n  orgID?: string\n  /** Specifies the organization name of the mapping */\n  org?: string\n}\nexport interface DeleteDBRPIDRequest {\n  /** The database retention policy mapping */\n  dbrpID: string\n  /** Specifies the organization ID of the mapping */\n  orgID?: string\n  /** Specifies the organization name of the mapping */\n  org?: string\n}\n/**\n * Dbrps API\n */\nexport class DbrpsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates DbrpsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List database retention policy mappings.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDBRPs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDBRPs(\n    request?: GetDBRPsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<DBRPs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dbrps${this.base.queryString(request, [\n        'orgID',\n        'org',\n        'id',\n        'bucketID',\n        'default',\n        'db',\n        'rp',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a database retention policy mapping.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostDBRP }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDBRP(\n    request: PostDBRPRequest,\n    requestOptions?: RequestOptions\n  ): Promise<DBRP> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dbrps`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a database retention policy mapping.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDBRPsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDBRPsID(\n    request: GetDBRPsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<DBRPGet> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dbrps/${request.dbrpID}${this.base.queryString(request, [\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a database retention policy mapping.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchDBRPID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchDBRPID(\n    request: PatchDBRPIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<DBRPGet> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/dbrps/${request.dbrpID}${this.base.queryString(request, [\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a database retention policy.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteDBRPID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDBRPID(\n    request: DeleteDBRPIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dbrps/${request.dbrpID}${this.base.queryString(request, [\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface GetDebugPprofAllProfilesRequest {\n  /** Collects and returns CPU profiling data for the specified [duration](https://docs.influxdata.com/influxdb/v2.1/reference/glossary/#duration).\n   */\n  cpu?: string\n}\nexport interface GetDebugPprofAllocsRequest {\n  /** - `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n */\n  debug?: number\n  /** Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n */\n  seconds?: string\n}\nexport interface GetDebugPprofBlockRequest {\n  /** - `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n */\n  debug?: number\n  /** Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n */\n  seconds?: string\n}\nexport interface GetDebugPprofCmdlineRequest {}\nexport interface GetDebugPprofGoroutineRequest {\n  /** - `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n */\n  debug?: number\n  /** Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n */\n  seconds?: string\n}\nexport interface GetDebugPprofHeapRequest {\n  /** - `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n */\n  debug?: number\n  /** Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n */\n  seconds?: string\n  /** - `0`: (Default) don't force garbage collection before sampling.\n- `1`: Force garbage collection before sampling.\n */\n  gc?: number\n}\nexport interface GetDebugPprofMutexRequest {\n  /** - `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n */\n  debug?: number\n  /** Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n */\n  seconds?: string\n}\nexport interface GetDebugPprofProfileRequest {\n  /** Number of seconds to collect profile data. Default is `30` seconds. */\n  seconds?: string\n}\nexport interface GetDebugPprofThreadCreateRequest {\n  /** - `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n */\n  debug?: number\n  /** Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n */\n  seconds?: string\n}\nexport interface GetDebugPprofTraceRequest {\n  /** Number of seconds to collect profile data. */\n  seconds?: string\n}\n/**\n * Debug API\n */\nexport class DebugAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates DebugAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get all runtime profiles.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDebugPprofAllProfiles }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofAllProfiles(\n    request?: GetDebugPprofAllProfilesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/all${this.base.queryString(request, ['cpu'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get the memory allocations runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDebugPprofAllocs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofAllocs(\n    request?: GetDebugPprofAllocsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/allocs${this.base.queryString(request, [\n        'debug',\n        'seconds',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get the block runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDebugPprofBlock }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofBlock(\n    request?: GetDebugPprofBlockRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/block${this.base.queryString(request, [\n        'debug',\n        'seconds',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get the command line invocation.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDebugPprofCmdline }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofCmdline(\n    request?: GetDebugPprofCmdlineRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/cmdline`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get the goroutines runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDebugPprofGoroutine }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofGoroutine(\n    request?: GetDebugPprofGoroutineRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/goroutine${this.base.queryString(request, [\n        'debug',\n        'seconds',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get the heap runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDebugPprofHeap }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofHeap(\n    request?: GetDebugPprofHeapRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/heap${this.base.queryString(request, [\n        'debug',\n        'seconds',\n        'gc',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get the mutual exclusion (mutex) runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDebugPprofMutex }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofMutex(\n    request?: GetDebugPprofMutexRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/mutex${this.base.queryString(request, [\n        'debug',\n        'seconds',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get the CPU runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDebugPprofProfile }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofProfile(\n    request?: GetDebugPprofProfileRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/profile${this.base.queryString(request, [\n        'seconds',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get the threadcreate runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDebugPprofThreadCreate }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofThreadCreate(\n    request?: GetDebugPprofThreadCreateRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/threadcreate${this.base.queryString(request, [\n        'debug',\n        'seconds',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get the runtime execution trace.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDebugPprofTrace }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofTrace(\n    request?: GetDebugPprofTraceRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/trace${this.base.queryString(request, ['seconds'])}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {DeletePredicateRequest} from './types'\n\nexport interface PostDeleteRequest {\n  /** Deletes data from an InfluxDB bucket. */\n  body: DeletePredicateRequest\n  /** Specifies the organization to delete data from. */\n  org?: string\n  /** Specifies the bucket to delete data from. */\n  bucket?: string\n  /** Specifies the organization ID of the resource. */\n  orgID?: string\n  /** Specifies the bucket ID to delete data from. */\n  bucketID?: string\n}\n/**\n * Delete API\n */\nexport class DeleteAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates DeleteAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Delete data.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostDelete }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDelete(\n    request: PostDeleteRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/delete${this.base.queryString(request, [\n        'org',\n        'bucket',\n        'orgID',\n        'bucketID',\n      ])}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Flags} from './types'\n\nexport interface GetFlagsRequest {}\n/**\n * Flags API\n */\nexport class FlagsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates FlagsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Return the feature flags for the currently authenticated user.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetFlags }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getFlags(\n    request?: GetFlagsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Flags> {\n    return this.base.request('GET', `/api/v2/flags`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {HealthCheck} from './types'\n\nexport interface GetHealthRequest {}\n/**\n * Health API\n */\nexport class HealthAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates HealthAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get the health of an instance.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetHealth }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getHealth(\n    request?: GetHealthRequest,\n    requestOptions?: RequestOptions\n  ): Promise<HealthCheck> {\n    return this.base.request('GET', `/health`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  LabelCreateRequest,\n  LabelResponse,\n  LabelUpdate,\n  LabelsResponse,\n} from './types'\n\nexport interface GetLabelsRequest {\n  /** The organization ID. */\n  orgID?: string\n}\nexport interface PostLabelsRequest {\n  /** Label to create */\n  body: LabelCreateRequest\n}\nexport interface GetLabelsIDRequest {\n  /** The ID of the label to update. */\n  labelID: string\n}\nexport interface PatchLabelsIDRequest {\n  /** The ID of the label to update. */\n  labelID: string\n  /** Label update */\n  body: LabelUpdate\n}\nexport interface DeleteLabelsIDRequest {\n  /** The ID of the label to delete. */\n  labelID: string\n}\n/**\n * Labels API\n */\nexport class LabelsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates LabelsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all labels.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getLabels(\n    request?: GetLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/labels${this.base.queryString(request, ['orgID'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a label.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postLabels(\n    request: PostLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a label.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getLabelsID(\n    request: GetLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a label.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchLabelsID(\n    request: PatchLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/labels/${request.labelID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteLabelsID(\n    request: DeleteLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Authorization,\n  AuthorizationUpdateRequest,\n  Authorizations,\n  LegacyAuthorizationPostRequest,\n  PasswordResetBody,\n} from './types'\n\nexport interface GetLegacyAuthorizationsRequest {\n  /** Only show legacy authorizations that belong to a user ID. */\n  userID?: string\n  /** Only show legacy authorizations that belong to a user name. */\n  user?: string\n  /** Only show legacy authorizations that belong to an organization ID. */\n  orgID?: string\n  /** Only show legacy authorizations that belong to a organization name. */\n  org?: string\n  /** Only show legacy authorizations with a specified token (auth name). */\n  token?: string\n  /** Only show legacy authorizations with a specified auth ID. */\n  authID?: string\n}\nexport interface PostLegacyAuthorizationsRequest {\n  /** Legacy authorization to create */\n  body: LegacyAuthorizationPostRequest\n}\nexport interface GetLegacyAuthorizationsIDRequest {\n  /** The ID of the legacy authorization to get. */\n  authID: string\n}\nexport interface PatchLegacyAuthorizationsIDRequest {\n  /** The ID of the legacy authorization to update. */\n  authID: string\n  /** Legacy authorization to update */\n  body: AuthorizationUpdateRequest\n}\nexport interface DeleteLegacyAuthorizationsIDRequest {\n  /** The ID of the legacy authorization to delete. */\n  authID: string\n}\nexport interface PostLegacyAuthorizationsIDPasswordRequest {\n  /** The ID of the legacy authorization to update. */\n  authID: string\n  /** New password */\n  body: PasswordResetBody\n}\n/**\n * Legacy API\n */\nexport class LegacyAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates LegacyAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all legacy authorizations.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetLegacyAuthorizations }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getLegacyAuthorizations(\n    request?: GetLegacyAuthorizationsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorizations> {\n    return this.base.request(\n      'GET',\n      `/api/v2/legacy/authorizations${this.base.queryString(request, [\n        'userID',\n        'user',\n        'orgID',\n        'org',\n        'token',\n        'authID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a legacy authorization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostLegacyAuthorizations }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postLegacyAuthorizations(\n    request: PostLegacyAuthorizationsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorization> {\n    return this.base.request(\n      'POST',\n      `/api/v2/legacy/authorizations`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a legacy authorization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetLegacyAuthorizationsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getLegacyAuthorizationsID(\n    request: GetLegacyAuthorizationsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorization> {\n    return this.base.request(\n      'GET',\n      `/api/v2/legacy/authorizations/${request.authID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a legacy authorization to be active or inactive.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchLegacyAuthorizationsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchLegacyAuthorizationsID(\n    request: PatchLegacyAuthorizationsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorization> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/legacy/authorizations/${request.authID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a legacy authorization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteLegacyAuthorizationsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteLegacyAuthorizationsID(\n    request: DeleteLegacyAuthorizationsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/legacy/authorizations/${request.authID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Set a legacy authorization password.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostLegacyAuthorizationsIDPassword }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postLegacyAuthorizationsIDPassword(\n    request: PostLegacyAuthorizationsIDPasswordRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/legacy/authorizations/${request.authID}/password`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {PasswordResetBody, UserResponse} from './types'\n\nexport interface GetMeRequest {}\nexport interface PutMePasswordRequest {\n  auth?: {user: string; password: string}\n  /** New password */\n  body: PasswordResetBody\n}\n/**\n * Me API\n */\nexport class MeAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates MeAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Retrieve the currently authenticated user.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetMe }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getMe(\n    request?: GetMeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<UserResponse> {\n    return this.base.request('GET', `/api/v2/me`, request, requestOptions)\n  }\n  /**\n   * Update a password.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PutMePassword }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putMePassword(\n    request: PutMePasswordRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/me/password`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface GetMetricsRequest {}\n/**\n * Metrics API\n */\nexport class MetricsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates MetricsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get metrics of an instance.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetMetrics }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getMetrics(\n    request?: GetMetricsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request('GET', `/api/v2/metrics`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  NotificationEndpoint,\n  NotificationEndpointUpdate,\n  NotificationEndpoints,\n  PostNotificationEndpoint,\n} from './types'\n\nexport interface GetNotificationEndpointsRequest {\n  offset?: number\n  limit?: number\n  /** Only show notification endpoints that belong to specific organization ID. */\n  orgID: string\n}\nexport interface CreateNotificationEndpointRequest {\n  /** Notification endpoint to create */\n  body: PostNotificationEndpoint\n}\nexport interface GetNotificationEndpointsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n}\nexport interface PutNotificationEndpointsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n  /** A new notification endpoint to replace the existing endpoint with */\n  body: NotificationEndpoint\n}\nexport interface PatchNotificationEndpointsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n  /** Check update to apply */\n  body: NotificationEndpointUpdate\n}\nexport interface DeleteNotificationEndpointsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n}\nexport interface GetNotificationEndpointsIDLabelsRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n}\nexport interface PostNotificationEndpointIDLabelsRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteNotificationEndpointsIDLabelsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\n/**\n * NotificationEndpoints API\n */\nexport class NotificationEndpointsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates NotificationEndpointsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all notification endpoints.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetNotificationEndpoints }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationEndpoints(\n    request: GetNotificationEndpointsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoints> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationEndpoints${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'orgID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/CreateNotificationEndpoint }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  createNotificationEndpoint(\n    request: CreateNotificationEndpointRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoint> {\n    return this.base.request(\n      'POST',\n      `/api/v2/notificationEndpoints`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetNotificationEndpointsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationEndpointsID(\n    request: GetNotificationEndpointsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoint> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationEndpoints/${request.endpointID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PutNotificationEndpointsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putNotificationEndpointsID(\n    request: PutNotificationEndpointsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoint> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/notificationEndpoints/${request.endpointID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchNotificationEndpointsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchNotificationEndpointsID(\n    request: PatchNotificationEndpointsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoint> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/notificationEndpoints/${request.endpointID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteNotificationEndpointsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteNotificationEndpointsID(\n    request: DeleteNotificationEndpointsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/notificationEndpoints/${request.endpointID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetNotificationEndpointsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationEndpointsIDLabels(\n    request: GetNotificationEndpointsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationEndpoints/${request.endpointID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostNotificationEndpointIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postNotificationEndpointIDLabels(\n    request: PostNotificationEndpointIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/notificationEndpoints/${request.endpointID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteNotificationEndpointsIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteNotificationEndpointsIDLabelsID(\n    request: DeleteNotificationEndpointsIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/notificationEndpoints/${request.endpointID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  FluxResponse,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  NotificationRule,\n  NotificationRuleUpdate,\n  NotificationRules,\n  PostNotificationRule,\n} from './types'\n\nexport interface GetNotificationRulesRequest {\n  offset?: number\n  limit?: number\n  /** Only show notification rules that belong to a specific organization ID. */\n  orgID: string\n  /** Only show notifications that belong to the specific check ID. */\n  checkID?: string\n  /** Only return notification rules that \"would match\" statuses which contain the tag key value pairs provided. */\n  tag?: string\n}\nexport interface CreateNotificationRuleRequest {\n  /** Notification rule to create */\n  body: PostNotificationRule\n}\nexport interface GetNotificationRulesIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n}\nexport interface PutNotificationRulesIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n  /** Notification rule update to apply */\n  body: NotificationRule\n}\nexport interface PatchNotificationRulesIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n  /** Notification rule update to apply */\n  body: NotificationRuleUpdate\n}\nexport interface DeleteNotificationRulesIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n}\nexport interface GetNotificationRulesIDLabelsRequest {\n  /** The notification rule ID. */\n  ruleID: string\n}\nexport interface PostNotificationRuleIDLabelsRequest {\n  /** The notification rule ID. */\n  ruleID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteNotificationRulesIDLabelsIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\nexport interface GetNotificationRulesIDQueryRequest {\n  /** The notification rule ID. */\n  ruleID: string\n}\n/**\n * NotificationRules API\n */\nexport class NotificationRulesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates NotificationRulesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all notification rules.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetNotificationRules }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationRules(\n    request: GetNotificationRulesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRules> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationRules${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'orgID',\n        'checkID',\n        'tag',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/CreateNotificationRule }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  createNotificationRule(\n    request: CreateNotificationRuleRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRule> {\n    return this.base.request(\n      'POST',\n      `/api/v2/notificationRules`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetNotificationRulesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationRulesID(\n    request: GetNotificationRulesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRule> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationRules/${request.ruleID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PutNotificationRulesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putNotificationRulesID(\n    request: PutNotificationRulesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRule> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/notificationRules/${request.ruleID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchNotificationRulesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchNotificationRulesID(\n    request: PatchNotificationRulesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRule> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/notificationRules/${request.ruleID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteNotificationRulesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteNotificationRulesID(\n    request: DeleteNotificationRulesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/notificationRules/${request.ruleID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetNotificationRulesIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationRulesIDLabels(\n    request: GetNotificationRulesIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationRules/${request.ruleID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostNotificationRuleIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postNotificationRuleIDLabels(\n    request: PostNotificationRuleIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/notificationRules/${request.ruleID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete label from a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteNotificationRulesIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteNotificationRulesIDLabelsID(\n    request: DeleteNotificationRulesIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/notificationRules/${request.ruleID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve a notification rule query.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetNotificationRulesIDQuery }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationRulesIDQuery(\n    request: GetNotificationRulesIDQueryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<FluxResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationRules/${request.ruleID}/query`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  Organization,\n  Organizations,\n  PatchOrganizationRequest,\n  PostOrganizationRequest,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  SecretKeys,\n  SecretKeysResponse,\n  Secrets,\n} from './types'\n\nexport interface GetOrgsRequest {\n  offset?: number\n  limit?: number\n  descending?: any\n  /** Filter organizations to a specific organization name. */\n  org?: string\n  /** Filter organizations to a specific organization ID. */\n  orgID?: string\n  /** Filter organizations to a specific user ID. */\n  userID?: string\n}\nexport interface PostOrgsRequest {\n  /** Organization to create */\n  body: PostOrganizationRequest\n}\nexport interface GetOrgsIDRequest {\n  /** The ID of the organization to get. */\n  orgID: string\n}\nexport interface PatchOrgsIDRequest {\n  /** The ID of the organization to get. */\n  orgID: string\n  /** Organization update to apply */\n  body: PatchOrganizationRequest\n}\nexport interface DeleteOrgsIDRequest {\n  /** The ID of the organization to delete. */\n  orgID: string\n}\nexport interface GetOrgsIDSecretsRequest {\n  /** The organization ID. */\n  orgID: string\n}\nexport interface PatchOrgsIDSecretsRequest {\n  /** The organization ID. */\n  orgID: string\n  /** Secret key value pairs to update/add */\n  body: Secrets\n}\nexport interface GetOrgsIDMembersRequest {\n  /** The organization ID. */\n  orgID: string\n}\nexport interface PostOrgsIDMembersRequest {\n  /** The organization ID. */\n  orgID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteOrgsIDMembersIDRequest {\n  /** The ID of the member to remove. */\n  userID: string\n  /** The organization ID. */\n  orgID: string\n}\nexport interface GetOrgsIDOwnersRequest {\n  /** The organization ID. */\n  orgID: string\n}\nexport interface PostOrgsIDOwnersRequest {\n  /** The organization ID. */\n  orgID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteOrgsIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The organization ID. */\n  orgID: string\n}\nexport interface PostOrgsIDSecretsRequest {\n  /** The organization ID. */\n  orgID: string\n  /** Secret key to delete */\n  body: SecretKeys\n}\nexport interface DeleteOrgsIDSecretsIDRequest {\n  /** The organization ID. */\n  orgID: string\n  /** The secret ID. */\n  secretID: string\n}\n/**\n * Orgs API\n */\nexport class OrgsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates OrgsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all organizations.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetOrgs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgs(\n    request?: GetOrgsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Organizations> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'descending',\n        'org',\n        'orgID',\n        'userID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostOrgs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postOrgs(\n    request: PostOrgsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Organization> {\n    return this.base.request(\n      'POST',\n      `/api/v2/orgs`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetOrgsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgsID(\n    request: GetOrgsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Organization> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs/${request.orgID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchOrgsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchOrgsID(\n    request: PatchOrgsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Organization> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/orgs/${request.orgID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteOrgsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteOrgsID(\n    request: DeleteOrgsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/orgs/${request.orgID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all secret keys for an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetOrgsIDSecrets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgsIDSecrets(\n    request: GetOrgsIDSecretsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<SecretKeysResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs/${request.orgID}/secrets`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update secrets in an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchOrgsIDSecrets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchOrgsIDSecrets(\n    request: PatchOrgsIDSecretsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/orgs/${request.orgID}/secrets`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * List all members of an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetOrgsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgsIDMembers(\n    request: GetOrgsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs/${request.orgID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostOrgsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postOrgsIDMembers(\n    request: PostOrgsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/orgs/${request.orgID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteOrgsIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteOrgsIDMembersID(\n    request: DeleteOrgsIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/orgs/${request.orgID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetOrgsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgsIDOwners(\n    request: GetOrgsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs/${request.orgID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostOrgsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postOrgsIDOwners(\n    request: PostOrgsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/orgs/${request.orgID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteOrgsIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteOrgsIDOwnersID(\n    request: DeleteOrgsIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/orgs/${request.orgID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Delete secrets from an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostOrgsIDSecrets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postOrgsIDSecrets(\n    request: PostOrgsIDSecretsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/orgs/${request.orgID}/secrets/delete`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a secret from an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteOrgsIDSecretsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteOrgsIDSecretsID(\n    request: DeleteOrgsIDSecretsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/orgs/${request.orgID}/secrets/${request.secretID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface GetPingRequest {}\n/**\n * Ping API\n */\nexport class PingAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates PingAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Checks the status of InfluxDB instance and version of InfluxDB.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetPing }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getPing(\n    request?: GetPingRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request('GET', `/ping`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  ASTResponse,\n  AnalyzeQueryResponse,\n  FluxSuggestion,\n  FluxSuggestions,\n  LanguageRequest,\n  Query,\n} from './types'\n\nexport interface PostQueryAstRequest {\n  /** Analyzed Flux query to generate abstract syntax tree. */\n  body: LanguageRequest\n}\nexport interface GetQuerySuggestionsRequest {}\nexport interface GetQuerySuggestionsNameRequest {\n  /** The name of the branching suggestion. */\n  name: string\n}\nexport interface PostQueryAnalyzeRequest {\n  /** Flux query to analyze */\n  body: Query\n}\nexport interface PostQueryRequest {\n  /** Flux query or specification to execute */\n  body: Query\n  /** Name of the organization executing the query. Accepts either the ID or Name. If you provide both `orgID` and `org`, `org` takes precedence. */\n  org?: string\n  /** ID of the organization executing the query. If you provide both `orgID` and `org`, `org` takes precedence. */\n  orgID?: string\n}\n/**\n * Query API\n */\nexport class QueryAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates QueryAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Generate an Abstract Syntax Tree (AST) from a query.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostQueryAst }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postQueryAst(\n    request: PostQueryAstRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ASTResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/query/ast`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve query suggestions.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetQuerySuggestions }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getQuerySuggestions(\n    request?: GetQuerySuggestionsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<FluxSuggestions> {\n    return this.base.request(\n      'GET',\n      `/api/v2/query/suggestions`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve query suggestions for a branching suggestion.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetQuerySuggestionsName }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getQuerySuggestionsName(\n    request: GetQuerySuggestionsNameRequest,\n    requestOptions?: RequestOptions\n  ): Promise<FluxSuggestion> {\n    return this.base.request(\n      'GET',\n      `/api/v2/query/suggestions/${request.name}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Analyze a Flux query.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostQueryAnalyze }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postQueryAnalyze(\n    request: PostQueryAnalyzeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<AnalyzeQueryResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/query/analyze`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Query data.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostQuery }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postQuery(\n    request: PostQueryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'POST',\n      `/api/v2/query${this.base.queryString(request, ['org', 'orgID'])}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Ready} from './types'\n\nexport interface GetReadyRequest {}\n/**\n * Ready API\n */\nexport class ReadyAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ReadyAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get the readiness of an instance at startup.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetReady }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getReady(\n    request?: GetReadyRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Ready> {\n    return this.base.request('GET', `/ready`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  RemoteConnection,\n  RemoteConnectionCreationRequest,\n  RemoteConnectionUpdateRequest,\n  RemoteConnections,\n} from './types'\n\nexport interface GetRemoteConnectionsRequest {\n  /** The organization ID. */\n  orgID: string\n  name?: string\n  remoteURL?: string\n}\nexport interface PostRemoteConnectionRequest {\n  /** entity body */\n  body: RemoteConnectionCreationRequest\n}\nexport interface GetRemoteConnectionByIDRequest {\n  remoteID: string\n}\nexport interface PatchRemoteConnectionByIDRequest {\n  remoteID: string\n  /** entity body */\n  body: RemoteConnectionUpdateRequest\n}\nexport interface DeleteRemoteConnectionByIDRequest {\n  remoteID: string\n}\n/**\n * Remotes API\n */\nexport class RemotesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates RemotesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all remote connections.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetRemoteConnections }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getRemoteConnections(\n    request: GetRemoteConnectionsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<RemoteConnections> {\n    return this.base.request(\n      'GET',\n      `/api/v2/remotes${this.base.queryString(request, [\n        'orgID',\n        'name',\n        'remoteURL',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Register a new remote connection.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostRemoteConnection }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postRemoteConnection(\n    request: PostRemoteConnectionRequest,\n    requestOptions?: RequestOptions\n  ): Promise<RemoteConnection> {\n    return this.base.request(\n      'POST',\n      `/api/v2/remotes`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a remote connection.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetRemoteConnectionByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getRemoteConnectionByID(\n    request: GetRemoteConnectionByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<RemoteConnection> {\n    return this.base.request(\n      'GET',\n      `/api/v2/remotes/${request.remoteID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a remote connection.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchRemoteConnectionByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchRemoteConnectionByID(\n    request: PatchRemoteConnectionByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<RemoteConnection> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/remotes/${request.remoteID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a remote connection.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteRemoteConnectionByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteRemoteConnectionByID(\n    request: DeleteRemoteConnectionByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/remotes/${request.remoteID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Replication,\n  ReplicationCreationRequest,\n  ReplicationUpdateRequest,\n  Replications,\n} from './types'\n\nexport interface GetReplicationsRequest {\n  /** The organization ID. */\n  orgID: string\n  name?: string\n  remoteID?: string\n  localBucketID?: string\n}\nexport interface PostReplicationRequest {\n  /** entity body */\n  body: ReplicationCreationRequest\n  /** If true, validate the replication, but don't save it. */\n  validate?: any\n}\nexport interface GetReplicationByIDRequest {\n  replicationID: string\n}\nexport interface PatchReplicationByIDRequest {\n  replicationID: string\n  /** entity body */\n  body: ReplicationUpdateRequest\n  /** If true, validate the updated information, but don't save it. */\n  validate?: any\n}\nexport interface DeleteReplicationByIDRequest {\n  replicationID: string\n}\nexport interface PostValidateReplicationByIDRequest {\n  replicationID: string\n}\n/**\n * Replications API\n */\nexport class ReplicationsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ReplicationsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all replications.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetReplications }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getReplications(\n    request: GetReplicationsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Replications> {\n    return this.base.request(\n      'GET',\n      `/api/v2/replications${this.base.queryString(request, [\n        'orgID',\n        'name',\n        'remoteID',\n        'localBucketID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Register a new replication.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostReplication }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postReplication(\n    request: PostReplicationRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Replication> {\n    return this.base.request(\n      'POST',\n      `/api/v2/replications${this.base.queryString(request, ['validate'])}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a replication.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetReplicationByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getReplicationByID(\n    request: GetReplicationByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Replication> {\n    return this.base.request(\n      'GET',\n      `/api/v2/replications/${request.replicationID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a replication.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchReplicationByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchReplicationByID(\n    request: PatchReplicationByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Replication> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/replications/${\n        request.replicationID\n      }${this.base.queryString(request, ['validate'])}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a replication.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteReplicationByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteReplicationByID(\n    request: DeleteReplicationByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/replications/${request.replicationID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Validate a replication.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostValidateReplicationByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postValidateReplicationByID(\n    request: PostValidateReplicationByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/replications/${request.replicationID}/validate`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface GetResourcesRequest {}\n/**\n * Resources API\n */\nexport class ResourcesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ResourcesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all known resources.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetResources }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getResources(\n    request?: GetResourcesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string[]> {\n    return this.base.request(\n      'GET',\n      `/api/v2/resources`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {BucketMetadataManifest, RestoredBucketMappings} from './types'\n\nexport interface PostRestoreKVRequest {\n  /** Full KV snapshot. */\n  body: string\n}\nexport interface PostRestoreSQLRequest {\n  /** Full SQL snapshot. */\n  body: string\n}\nexport interface PostRestoreBucketIDRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** Database info serialized as protobuf. */\n  body: string\n}\nexport interface PostRestoreBucketMetadataRequest {\n  /** Metadata manifest for a bucket. */\n  body: BucketMetadataManifest\n}\nexport interface PostRestoreShardIdRequest {\n  /** The shard ID. */\n  shardID: string\n  /** TSM snapshot. */\n  body: string\n}\n/**\n * Restore API\n */\nexport class RestoreAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates RestoreAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Overwrite the embedded KV store on the server with a backed-up snapshot.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostRestoreKV }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postRestoreKV(\n    request: PostRestoreKVRequest,\n    requestOptions?: RequestOptions\n  ): Promise<{\n    /** token is the root token for the instance after restore (this is overwritten during the restore) */\n    token?: string\n  }> {\n    return this.base.request(\n      'POST',\n      `/api/v2/restore/kv`,\n      request,\n      requestOptions,\n      'text/plain'\n    )\n  }\n  /**\n   * Overwrite the embedded SQL store on the server with a backed-up snapshot.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostRestoreSQL }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postRestoreSQL(\n    request: PostRestoreSQLRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/restore/sql`,\n      request,\n      requestOptions,\n      'text/plain'\n    )\n  }\n  /**\n   * Overwrite storage metadata for a bucket with shard info from a backup.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostRestoreBucketID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postRestoreBucketID(\n    request: PostRestoreBucketIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'POST',\n      `/api/v2/restore/bucket/${request.bucketID}`,\n      request,\n      requestOptions,\n      'text/plain'\n    )\n  }\n  /**\n   * Create a new bucket pre-seeded with shard info from a backup.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostRestoreBucketMetadata }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postRestoreBucketMetadata(\n    request: PostRestoreBucketMetadataRequest,\n    requestOptions?: RequestOptions\n  ): Promise<RestoredBucketMappings> {\n    return this.base.request(\n      'POST',\n      `/api/v2/restore/bucketMetadata`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Restore a TSM snapshot into a shard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostRestoreShardId }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postRestoreShardId(\n    request: PostRestoreShardIdRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/restore/shards/${request.shardID}`,\n      request,\n      requestOptions,\n      'text/plain'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  ScraperTargetRequest,\n  ScraperTargetResponse,\n  ScraperTargetResponses,\n} from './types'\n\nexport interface GetScrapersRequest {\n  /** Specifies the name of the scraper target. */\n  name?: string\n  /** List of scraper target IDs to return. If both `id` and `owner` are specified, only `id` is used. */\n  id?: any\n  /** Specifies the organization ID of the scraper target. */\n  orgID?: string\n  /** Specifies the organization name of the scraper target. */\n  org?: string\n}\nexport interface PostScrapersRequest {\n  /** Scraper target to create */\n  body: ScraperTargetRequest\n}\nexport interface GetScrapersIDRequest {\n  /** The identifier of the scraper target. */\n  scraperTargetID: string\n}\nexport interface PatchScrapersIDRequest {\n  /** The identifier of the scraper target. */\n  scraperTargetID: string\n  /** Scraper target update to apply */\n  body: ScraperTargetRequest\n}\nexport interface DeleteScrapersIDRequest {\n  /** The identifier of the scraper target. */\n  scraperTargetID: string\n}\nexport interface GetScrapersIDLabelsRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface PostScrapersIDLabelsRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteScrapersIDLabelsIDRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n  /** The label ID. */\n  labelID: string\n}\nexport interface GetScrapersIDMembersRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface PostScrapersIDMembersRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteScrapersIDMembersIDRequest {\n  /** The ID of member to remove. */\n  userID: string\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface GetScrapersIDOwnersRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface PostScrapersIDOwnersRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteScrapersIDOwnersIDRequest {\n  /** The ID of owner to remove. */\n  userID: string\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\n/**\n * Scrapers API\n */\nexport class ScrapersAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ScrapersAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all scraper targets.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetScrapers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapers(\n    request?: GetScrapersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScraperTargetResponses> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers${this.base.queryString(request, [\n        'name',\n        'id',\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostScrapers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScrapers(\n    request: PostScrapersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScraperTargetResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scrapers`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetScrapersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapersID(\n    request: GetScrapersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScraperTargetResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers/${request.scraperTargetID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchScrapersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchScrapersID(\n    request: PatchScrapersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScraperTargetResponse> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/scrapers/${request.scraperTargetID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteScrapersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScrapersID(\n    request: DeleteScrapersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scrapers/${request.scraperTargetID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetScrapersIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapersIDLabels(\n    request: GetScrapersIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers/${request.scraperTargetID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostScrapersIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScrapersIDLabels(\n    request: PostScrapersIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scrapers/${request.scraperTargetID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteScrapersIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScrapersIDLabelsID(\n    request: DeleteScrapersIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scrapers/${request.scraperTargetID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all users with member privileges for a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetScrapersIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapersIDMembers(\n    request: GetScrapersIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers/${request.scraperTargetID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostScrapersIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScrapersIDMembers(\n    request: PostScrapersIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scrapers/${request.scraperTargetID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteScrapersIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScrapersIDMembersID(\n    request: DeleteScrapersIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scrapers/${request.scraperTargetID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetScrapersIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapersIDOwners(\n    request: GetScrapersIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers/${request.scraperTargetID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostScrapersIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScrapersIDOwners(\n    request: PostScrapersIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scrapers/${request.scraperTargetID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteScrapersIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScrapersIDOwnersID(\n    request: DeleteScrapersIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scrapers/${request.scraperTargetID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Script,\n  ScriptCreateRequest,\n  ScriptHTTPResponseData,\n  ScriptInvocationParams,\n  ScriptUpdateRequest,\n  Scripts,\n} from './types'\n\nexport interface GetScriptsRequest {\n  /** The number of scripts to return. */\n  limit?: number\n  /** The offset for pagination. */\n  offset?: number\n}\nexport interface PostScriptsRequest {\n  /** The script to create. */\n  body: ScriptCreateRequest\n}\nexport interface GetScriptsIDRequest {\n  /** The script ID. */\n  scriptID: string\n}\nexport interface PatchScriptsIDRequest {\n  /** The script ID. */\n  scriptID: string\n  /** Script update to apply */\n  body: ScriptUpdateRequest\n}\nexport interface DeleteScriptsIDRequest {\n  /** The ID of the script to delete. */\n  scriptID: string\n}\nexport interface PostScriptsIDInvokeRequest {\n  scriptID: string\n  /** entity body */\n  body: ScriptInvocationParams\n}\n/**\n * Scripts API\n */\nexport class ScriptsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ScriptsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List scripts.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/GetScripts }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScripts(\n    request?: GetScriptsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Scripts> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scripts${this.base.queryString(request, ['limit', 'offset'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a script.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/PostScripts }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScripts(\n    request: PostScriptsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Script> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scripts`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a script.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/GetScriptsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScriptsID(\n    request: GetScriptsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Script> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scripts/${request.scriptID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a script.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/PatchScriptsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchScriptsID(\n    request: PatchScriptsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Script> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/scripts/${request.scriptID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a script.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/DeleteScriptsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScriptsID(\n    request: DeleteScriptsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scripts/${request.scriptID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Invoke a script.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/PostScriptsIDInvoke }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScriptsIDInvoke(\n    request: PostScriptsIDInvokeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScriptHTTPResponseData> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scripts/${request.scriptID}/invoke`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {IsOnboarding, OnboardingRequest, OnboardingResponse} from './types'\n\nexport interface GetSetupRequest {}\nexport interface PostSetupRequest {\n  /** Source to create */\n  body: OnboardingRequest\n}\n/**\n * Setup API\n */\nexport class SetupAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates SetupAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Check if database has default user, org, bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetSetup }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSetup(\n    request?: GetSetupRequest,\n    requestOptions?: RequestOptions\n  ): Promise<IsOnboarding> {\n    return this.base.request('GET', `/api/v2/setup`, request, requestOptions)\n  }\n  /**\n   * Set up initial user, org and bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostSetup }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postSetup(\n    request: PostSetupRequest,\n    requestOptions?: RequestOptions\n  ): Promise<OnboardingResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/setup`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface PostSigninRequest {\n  auth?: {user: string; password: string}\n}\n/**\n * Signin API\n */\nexport class SigninAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates SigninAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Create a user session.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostSignin }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postSignin(\n    request: PostSigninRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request('POST', `/api/v2/signin`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface PostSignoutRequest {}\n/**\n * Signout API\n */\nexport class SignoutAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates SignoutAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Expire the current UI session.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostSignout }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postSignout(\n    request?: PostSignoutRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request('POST', `/api/v2/signout`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Buckets, HealthCheck, Source, Sources} from './types'\n\nexport interface GetSourcesRequest {\n  /** The name of the organization. */\n  org?: string\n}\nexport interface PostSourcesRequest {\n  /** Source to create */\n  body: Source\n}\nexport interface GetSourcesIDRequest {\n  /** The source ID. */\n  sourceID: string\n}\nexport interface PatchSourcesIDRequest {\n  /** The source ID. */\n  sourceID: string\n  /** Source update */\n  body: Source\n}\nexport interface DeleteSourcesIDRequest {\n  /** The source ID. */\n  sourceID: string\n}\nexport interface GetSourcesIDHealthRequest {\n  /** The source ID. */\n  sourceID: string\n}\nexport interface GetSourcesIDBucketsRequest {\n  /** The source ID. */\n  sourceID: string\n  /** The name of the organization. */\n  org?: string\n}\n/**\n * Sources API\n */\nexport class SourcesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates SourcesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all sources.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetSources }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSources(\n    request?: GetSourcesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Sources> {\n    return this.base.request(\n      'GET',\n      `/api/v2/sources${this.base.queryString(request, ['org'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a source.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostSources }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postSources(\n    request: PostSourcesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Source> {\n    return this.base.request(\n      'POST',\n      `/api/v2/sources`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a source.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetSourcesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSourcesID(\n    request: GetSourcesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Source> {\n    return this.base.request(\n      'GET',\n      `/api/v2/sources/${request.sourceID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a Source.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchSourcesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchSourcesID(\n    request: PatchSourcesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Source> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/sources/${request.sourceID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a source.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteSourcesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteSourcesID(\n    request: DeleteSourcesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/sources/${request.sourceID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get the health of a source.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetSourcesIDHealth }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSourcesIDHealth(\n    request: GetSourcesIDHealthRequest,\n    requestOptions?: RequestOptions\n  ): Promise<HealthCheck> {\n    return this.base.request(\n      'GET',\n      `/api/v2/sources/${request.sourceID}/health`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get buckets in a source.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetSourcesIDBuckets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSourcesIDBuckets(\n    request: GetSourcesIDBucketsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Buckets> {\n    return this.base.request(\n      'GET',\n      `/api/v2/sources/${\n        request.sourceID\n      }/buckets${this.base.queryString(request, ['org'])}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Stack} from './types'\n\nexport interface ListStacksRequest {\n  /** The organization ID of the stacks */\n  orgID: string\n  /** A collection of names to filter the list by. */\n  name?: string\n  /** A collection of stackIDs to filter the list by. */\n  stackID?: string\n}\nexport interface CreateStackRequest {\n  /** The stack to create. */\n  body: {\n    orgID?: string\n    name?: string\n    description?: string\n    urls?: string[]\n  }\n}\nexport interface ReadStackRequest {\n  /** The identifier of the stack. */\n  stack_id: string\n}\nexport interface UpdateStackRequest {\n  /** The identifier of the stack. */\n  stack_id: string\n  /** The stack to update. */\n  body: {\n    name?: string\n    description?: string\n    templateURLs?: string[]\n    additionalResources?: Array<{\n      resourceID: string\n      kind: string\n      templateMetaName?: string\n    }>\n  }\n}\nexport interface DeleteStackRequest {\n  /** The identifier of the stack. */\n  stack_id: string\n  /** The identifier of the organization. */\n  orgID: string\n}\nexport interface UninstallStackRequest {\n  /** The identifier of the stack. */\n  stack_id: string\n}\n/**\n * Stacks API\n */\nexport class StacksAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates StacksAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List installed templates.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/ListStacks }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  listStacks(\n    request: ListStacksRequest,\n    requestOptions?: RequestOptions\n  ): Promise<{\n    stacks?: Stack[]\n  }> {\n    return this.base.request(\n      'GET',\n      `/api/v2/stacks${this.base.queryString(request, [\n        'orgID',\n        'name',\n        'stackID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a new stack.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/CreateStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  createStack(\n    request: CreateStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Stack> {\n    return this.base.request(\n      'POST',\n      `/api/v2/stacks`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a stack.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/ReadStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  readStack(\n    request: ReadStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Stack> {\n    return this.base.request(\n      'GET',\n      `/api/v2/stacks/${request.stack_id}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a stack.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/UpdateStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  updateStack(\n    request: UpdateStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Stack> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/stacks/${request.stack_id}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a stack and associated resources.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteStack(\n    request: DeleteStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/stacks/${request.stack_id}${this.base.queryString(request, [\n        'orgID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Uninstall a stack.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/UninstallStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  uninstallStack(\n    request: UninstallStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Stack> {\n    return this.base.request(\n      'POST',\n      `/api/v2/stacks/${request.stack_id}/uninstall`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  Logs,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  Run,\n  RunManually,\n  Runs,\n  Task,\n  TaskCreateRequest,\n  TaskUpdateRequest,\n  Tasks,\n} from './types'\n\nexport interface GetTasksIDRequest {\n  /** The task ID. */\n  taskID: string\n}\nexport interface PatchTasksIDRequest {\n  /** The task ID. */\n  taskID: string\n  /** Task update to apply */\n  body: TaskUpdateRequest\n}\nexport interface DeleteTasksIDRequest {\n  /** The ID of the task to delete. */\n  taskID: string\n}\nexport interface GetTasksIDRunsRequest {\n  /** The ID of the task to get runs for. */\n  taskID: string\n  /** Returns runs after a specific ID. */\n  after?: string\n  /** The number of runs to return */\n  limit?: number\n  /** Filter runs to those scheduled after this time, RFC3339 */\n  afterTime?: string\n  /** Filter runs to those scheduled before this time, RFC3339 */\n  beforeTime?: string\n}\nexport interface PostTasksIDRunsRequest {\n  taskID: string\n  /** entity body */\n  body: RunManually\n}\nexport interface GetTasksIDRunsIDRequest {\n  /** The task ID. */\n  taskID: string\n  /** The run ID. */\n  runID: string\n}\nexport interface DeleteTasksIDRunsIDRequest {\n  /** The task ID. */\n  taskID: string\n  /** The run ID. */\n  runID: string\n}\nexport interface PostTasksIDRunsIDRetryRequest {\n  /** The task ID. */\n  taskID: string\n  /** The run ID. */\n  runID: string\n  /** entity body */\n  body: any\n}\nexport interface GetTasksIDLogsRequest {\n  /** The task ID. */\n  taskID: string\n}\nexport interface GetTasksIDRunsIDLogsRequest {\n  /** ID of task to get logs for. */\n  taskID: string\n  /** ID of run to get logs for. */\n  runID: string\n}\nexport interface GetTasksIDLabelsRequest {\n  /** The task ID. */\n  taskID: string\n}\nexport interface PostTasksIDLabelsRequest {\n  /** The task ID. */\n  taskID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteTasksIDLabelsIDRequest {\n  /** The task ID. */\n  taskID: string\n  /** The label ID. */\n  labelID: string\n}\nexport interface GetTasksIDMembersRequest {\n  /** The task ID. */\n  taskID: string\n}\nexport interface PostTasksIDMembersRequest {\n  /** The task ID. */\n  taskID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteTasksIDMembersIDRequest {\n  /** The ID of the member to remove. */\n  userID: string\n  /** The task ID. */\n  taskID: string\n}\nexport interface GetTasksIDOwnersRequest {\n  /** The task ID. */\n  taskID: string\n}\nexport interface PostTasksIDOwnersRequest {\n  /** The task ID. */\n  taskID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteTasksIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The task ID. */\n  taskID: string\n}\nexport interface GetTasksRequest {\n  /** Returns task with a specific name. */\n  name?: string\n  /** Return tasks after a specified ID. */\n  after?: string\n  /** Filter tasks to a specific user ID. */\n  user?: string\n  /** Filter tasks to a specific organization name. */\n  org?: string\n  /** Filter tasks to a specific organization ID. */\n  orgID?: string\n  /** Filter tasks by a status--\"inactive\" or \"active\". */\n  status?: string\n  /** The number of tasks to return */\n  limit?: number\n  /** Type of task, unset by default. */\n  type?: string\n}\nexport interface PostTasksRequest {\n  /** Task to create */\n  body: TaskCreateRequest\n}\n/**\n * Tasks API\n */\nexport class TasksAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates TasksAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Retrieve a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTasksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksID(\n    request: GetTasksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Task> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchTasksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchTasksID(\n    request: PatchTasksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Task> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/tasks/${request.taskID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteTasksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksID(\n    request: DeleteTasksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List runs for a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTasksIDRuns }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDRuns(\n    request: GetTasksIDRunsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Runs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/runs${this.base.queryString(request, [\n        'after',\n        'limit',\n        'afterTime',\n        'beforeTime',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Manually start a task run, overriding the current schedule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostTasksIDRuns }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDRuns(\n    request: PostTasksIDRunsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Run> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/runs`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a single run for a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTasksIDRunsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDRunsID(\n    request: GetTasksIDRunsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Run> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/runs/${request.runID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Cancel a running task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteTasksIDRunsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksIDRunsID(\n    request: DeleteTasksIDRunsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}/runs/${request.runID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retry a task run.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostTasksIDRunsIDRetry }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDRunsIDRetry(\n    request: PostTasksIDRunsIDRetryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Run> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/runs/${request.runID}/retry`,\n      request,\n      requestOptions,\n      'application/json; charset=utf-8'\n    )\n  }\n  /**\n   * Retrieve all logs for a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTasksIDLogs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDLogs(\n    request: GetTasksIDLogsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Logs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/logs`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve all logs for a run.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTasksIDRunsIDLogs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDRunsIDLogs(\n    request: GetTasksIDRunsIDLogsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Logs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/runs/${request.runID}/logs`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTasksIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDLabels(\n    request: GetTasksIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostTasksIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDLabels(\n    request: PostTasksIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteTasksIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksIDLabelsID(\n    request: DeleteTasksIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all task members.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTasksIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDMembers(\n    request: GetTasksIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostTasksIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDMembers(\n    request: PostTasksIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteTasksIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksIDMembersID(\n    request: DeleteTasksIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTasksIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDOwners(\n    request: GetTasksIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostTasksIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDOwners(\n    request: PostTasksIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteTasksIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksIDOwnersID(\n    request: DeleteTasksIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all tasks.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTasks }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasks(\n    request?: GetTasksRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Tasks> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks${this.base.queryString(request, [\n        'name',\n        'after',\n        'user',\n        'org',\n        'orgID',\n        'status',\n        'limit',\n        'type',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a new task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostTasks }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasks(\n    request: PostTasksRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Task> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {TelegrafPlugins} from './types'\n\nexport interface GetTelegrafPluginsRequest {\n  /** The type of plugin desired. */\n  type?: string\n}\n/**\n * Telegraf API\n */\nexport class TelegrafAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates TelegrafAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all Telegraf plugins.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTelegrafPlugins }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafPlugins(\n    request?: GetTelegrafPluginsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<TelegrafPlugins> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegraf/plugins${this.base.queryString(request, ['type'])}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  Telegraf,\n  TelegrafPluginRequest,\n  Telegrafs,\n} from './types'\n\nexport interface GetTelegrafsRequest {\n  /** The organization ID the Telegraf config belongs to. */\n  orgID?: string\n}\nexport interface PostTelegrafsRequest {\n  /** Telegraf configuration to create */\n  body: TelegrafPluginRequest\n}\nexport interface GetTelegrafsIDRequest {\n  /** The Telegraf configuration ID. */\n  telegrafID: string\n}\nexport interface PutTelegrafsIDRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n  /** Telegraf configuration update to apply */\n  body: TelegrafPluginRequest\n}\nexport interface DeleteTelegrafsIDRequest {\n  /** The Telegraf configuration ID. */\n  telegrafID: string\n}\nexport interface GetTelegrafsIDLabelsRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\nexport interface PostTelegrafsIDLabelsRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteTelegrafsIDLabelsIDRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n  /** The label ID. */\n  labelID: string\n}\nexport interface GetTelegrafsIDMembersRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\nexport interface PostTelegrafsIDMembersRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteTelegrafsIDMembersIDRequest {\n  /** The ID of the member to remove. */\n  userID: string\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\nexport interface GetTelegrafsIDOwnersRequest {\n  /** The Telegraf configuration ID. */\n  telegrafID: string\n}\nexport interface PostTelegrafsIDOwnersRequest {\n  /** The Telegraf configuration ID. */\n  telegrafID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteTelegrafsIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\n/**\n * Telegrafs API\n */\nexport class TelegrafsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates TelegrafsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all Telegraf configurations.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTelegrafs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafs(\n    request?: GetTelegrafsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Telegrafs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs${this.base.queryString(request, ['orgID'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a Telegraf configuration.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostTelegrafs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTelegrafs(\n    request: PostTelegrafsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Telegraf> {\n    return this.base.request(\n      'POST',\n      `/api/v2/telegrafs`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a Telegraf configuration.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTelegrafsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafsID(\n    request: GetTelegrafsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs/${request.telegrafID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a Telegraf configuration.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PutTelegrafsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putTelegrafsID(\n    request: PutTelegrafsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Telegraf> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/telegrafs/${request.telegrafID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a Telegraf configuration.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteTelegrafsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTelegrafsID(\n    request: DeleteTelegrafsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/telegrafs/${request.telegrafID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTelegrafsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafsIDLabels(\n    request: GetTelegrafsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs/${request.telegrafID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostTelegrafsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTelegrafsIDLabels(\n    request: PostTelegrafsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/telegrafs/${request.telegrafID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteTelegrafsIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTelegrafsIDLabelsID(\n    request: DeleteTelegrafsIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/telegrafs/${request.telegrafID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all users with member privileges for a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTelegrafsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafsIDMembers(\n    request: GetTelegrafsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs/${request.telegrafID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostTelegrafsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTelegrafsIDMembers(\n    request: PostTelegrafsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/telegrafs/${request.telegrafID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteTelegrafsIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTelegrafsIDMembersID(\n    request: DeleteTelegrafsIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/telegrafs/${request.telegrafID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of a Telegraf configuration.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetTelegrafsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafsIDOwners(\n    request: GetTelegrafsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs/${request.telegrafID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a Telegraf configuration.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostTelegrafsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTelegrafsIDOwners(\n    request: PostTelegrafsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/telegrafs/${request.telegrafID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteTelegrafsIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTelegrafsIDOwnersID(\n    request: DeleteTelegrafsIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/telegrafs/${request.telegrafID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Template,\n  TemplateApply,\n  TemplateExportByID,\n  TemplateExportByName,\n  TemplateSummary,\n} from './types'\n\nexport interface ApplyTemplateRequest {\n  /** entity body */\n  body: TemplateApply\n}\nexport interface ExportTemplateRequest {\n  /** Export resources as an InfluxDB template. */\n  body: TemplateExportByID | TemplateExportByName\n}\n/**\n * Templates API\n */\nexport class TemplatesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates TemplatesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Apply or dry-run a template.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/ApplyTemplate }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  applyTemplate(\n    request: ApplyTemplateRequest,\n    requestOptions?: RequestOptions\n  ): Promise<TemplateSummary> {\n    return this.base.request(\n      'POST',\n      `/api/v2/templates/apply`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Export a new template.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/ExportTemplate }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  exportTemplate(\n    request: ExportTemplateRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Template> {\n    return this.base.request(\n      'POST',\n      `/api/v2/templates/export`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {PasswordResetBody, User, UserResponse, Users} from './types'\n\nexport interface PostUsersIDPasswordRequest {\n  /** The user ID. */\n  userID: string\n  auth?: {user: string; password: string}\n  /** New password */\n  body: PasswordResetBody\n}\nexport interface GetUsersRequest {\n  offset?: number\n  limit?: number\n  /** Resource ID to seek from. Results are not inclusive of this ID. Use `after` instead of `offset`.\n   */\n  after?: string\n  name?: string\n  id?: string\n}\nexport interface PostUsersRequest {\n  /** User to create */\n  body: User\n}\nexport interface GetUsersIDRequest {\n  /** The user ID. */\n  userID: string\n}\nexport interface PatchUsersIDRequest {\n  /** The ID of the user to update. */\n  userID: string\n  /** User update to apply */\n  body: User\n}\nexport interface DeleteUsersIDRequest {\n  /** The ID of the user to delete. */\n  userID: string\n}\n/**\n * Users API\n */\nexport class UsersAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates UsersAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Update a password.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostUsersIDPassword }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postUsersIDPassword(\n    request: PostUsersIDPasswordRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/users/${request.userID}/password`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * List all users.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetUsers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getUsers(\n    request?: GetUsersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Users> {\n    return this.base.request(\n      'GET',\n      `/api/v2/users${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'after',\n        'name',\n        'id',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a user.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostUsers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postUsers(\n    request: PostUsersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<UserResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/users`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a user.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetUsersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getUsersID(\n    request: GetUsersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<UserResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/users/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a user.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchUsersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchUsersID(\n    request: PatchUsersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<UserResponse> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/users/${request.userID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a user.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteUsersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteUsersID(\n    request: DeleteUsersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/users/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  Variable,\n  Variables,\n} from './types'\n\nexport interface GetVariablesIDLabelsRequest {\n  /** The variable ID. */\n  variableID: string\n}\nexport interface PostVariablesIDLabelsRequest {\n  /** The variable ID. */\n  variableID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteVariablesIDLabelsIDRequest {\n  /** The variable ID. */\n  variableID: string\n  /** The label ID to delete. */\n  labelID: string\n}\nexport interface GetVariablesRequest {\n  /** The name of the organization. */\n  org?: string\n  /** The organization ID. */\n  orgID?: string\n}\nexport interface PostVariablesRequest {\n  /** Variable to create */\n  body: Variable\n}\nexport interface GetVariablesIDRequest {\n  /** The variable ID. */\n  variableID: string\n}\nexport interface PutVariablesIDRequest {\n  /** The variable ID. */\n  variableID: string\n  /** Variable to replace */\n  body: Variable\n}\nexport interface PatchVariablesIDRequest {\n  /** The variable ID. */\n  variableID: string\n  /** Variable update to apply */\n  body: Variable\n}\nexport interface DeleteVariablesIDRequest {\n  /** The variable ID. */\n  variableID: string\n}\n/**\n * Variables API\n */\nexport class VariablesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates VariablesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all labels for a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetVariablesIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getVariablesIDLabels(\n    request: GetVariablesIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/variables/${request.variableID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostVariablesIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postVariablesIDLabels(\n    request: PostVariablesIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/variables/${request.variableID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteVariablesIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteVariablesIDLabelsID(\n    request: DeleteVariablesIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/variables/${request.variableID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all variables.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetVariables }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getVariables(\n    request?: GetVariablesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variables> {\n    return this.base.request(\n      'GET',\n      `/api/v2/variables${this.base.queryString(request, ['org', 'orgID'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostVariables }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postVariables(\n    request: PostVariablesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variable> {\n    return this.base.request(\n      'POST',\n      `/api/v2/variables`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetVariablesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getVariablesID(\n    request: GetVariablesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variable> {\n    return this.base.request(\n      'GET',\n      `/api/v2/variables/${request.variableID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Replace a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PutVariablesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putVariablesID(\n    request: PutVariablesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variable> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/variables/${request.variableID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchVariablesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchVariablesID(\n    request: PatchVariablesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variable> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/variables/${request.variableID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteVariablesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteVariablesID(\n    request: DeleteVariablesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/variables/${request.variableID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface PostWriteRequest {\n  /** Data in line protocol format. */\n  body: string\n  /** Destination organization for writes. The database writes all points in the batch to this organization. If you provide both `orgID` and `org` parameters, `org` takes precedence. */\n  org: string\n  /** ID of the destination organization for writes. If both `orgID` and `org` are specified, `org` takes precedence. */\n  orgID?: string\n  /** Destination bucket for writes. */\n  bucket: string\n  /** Precision for unix timestamps in the line protocol of the request payload. */\n  precision?: any\n}\n/**\n * Write API\n */\nexport class WriteAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates WriteAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Write data.\n   * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostWrite }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postWrite(\n    request: PostWriteRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/write${this.base.queryString(request, [\n        'org',\n        'orgID',\n        'bucket',\n        'precision',\n      ])}`,\n      request,\n      requestOptions,\n      'text/plain'\n    )\n  }\n}\n","import {\n  InfluxDB,\n  Transport,\n  AnnotatedCSVResponse,\n  APIExecutor,\n  CommunicationObserver,\n} from '@influxdata/influxdb-client'\n\n/** ExecutionOptions contains execution options for a flux script. */\nexport interface ExecutionOptions {\n  /**\n   * Requests gzip encoded response.\n   */\n  gzip?: boolean\n  /**\n   * HTTP headers that will be sent with every query request.\n   */\n  headers?: {[key: string]: string}\n}\n\n/**\n * FluxScriptInvocationAPI executes flux 'API invocable script' and parses the result CSV annotated data.\n * See https://docs.influxdata.com/influxdb/cloud/api-guide/api-invocable-scripts/ .\n */\nexport class FluxScriptInvocationAPI {\n  // internal\n  private transport: Transport\n  private processCSVResponse: (supplier: APIExecutor) => AnnotatedCSVResponse\n  private options: ExecutionOptions\n\n  /**\n   * Creates FluxScriptInvocationAPI with the supplied InfluxDB instance and a particular script identifier.\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   * @param options - script execution options\n   */\n  constructor(influxDB: InfluxDB, options?: ExecutionOptions) {\n    this.transport = influxDB.transport\n    this.processCSVResponse = influxDB.processCSVResponse\n    this.options = {...options}\n  }\n\n  /**\n   * Invoke returns a parsed response data stream that executes\n   * the supplied script when asked for data.\n   * @param scriptID - script identifier\n   * @param params  - script parameters\n   * @returns response with various methods to process data from the returned annotated\n   * CSV response data stream\n   */\n  invoke(scriptID: string, params?: Record<string, any>): AnnotatedCSVResponse {\n    return this.processCSVResponse(this.createExecutor(scriptID, params))\n  }\n\n  private createExecutor(\n    scriptID: string,\n    params: Record<string, any> | undefined\n  ): APIExecutor {\n    const {gzip, headers} = this.options\n\n    return (consumer: CommunicationObserver<Uint8Array>): void => {\n      this.transport.send(\n        `/api/v2/scripts/${scriptID}/invoke`,\n        JSON.stringify({\n          params: {...params},\n        }),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n            ...headers,\n          },\n        },\n        consumer\n      )\n    }\n  }\n}\n"],"names":["APIBase","constructor","influxDB","Error","transport","this","queryString","request","params","reduce","acc","key","val","encodeURIComponent","String","method","path","requestOptions","mediaType","sendOptions","Object","assign","headers","auth","value","user","password","btoa","Buffer","from","toString","base64","body","responseStarted","RootAPI","base","getRoutes","AuthorizationsAPI","getAuthorizations","postAuthorizations","getAuthorizationsID","authID","patchAuthorizationsID","deleteAuthorizationsID","BackupAPI","getBackupKV","getBackupMetadata","getBackupShardId","shardID","BucketsAPI","getBuckets","postBuckets","getBucketsID","bucketID","patchBucketsID","deleteBucketsID","getBucketsIDLabels","postBucketsIDLabels","deleteBucketsIDLabelsID","labelID","getBucketsIDMembers","postBucketsIDMembers","deleteBucketsIDMembersID","userID","getBucketsIDOwners","postBucketsIDOwners","deleteBucketsIDOwnersID","ChecksAPI","getChecks","createCheck","getChecksID","checkID","putChecksID","patchChecksID","deleteChecksID","getChecksIDLabels","postChecksIDLabels","deleteChecksIDLabelsID","getChecksIDQuery","ConfigAPI","getConfig","DashboardsAPI","getDashboardsID","dashboardID","patchDashboardsID","deleteDashboardsID","postDashboardsIDCells","putDashboardsIDCells","patchDashboardsIDCellsID","cellID","deleteDashboardsIDCellsID","getDashboardsIDCellsIDView","patchDashboardsIDCellsIDView","getDashboardsIDLabels","postDashboardsIDLabels","deleteDashboardsIDLabelsID","getDashboardsIDMembers","postDashboardsIDMembers","deleteDashboardsIDMembersID","getDashboardsIDOwners","postDashboardsIDOwners","deleteDashboardsIDOwnersID","getDashboards","postDashboards","DbrpsAPI","getDBRPs","postDBRP","getDBRPsID","dbrpID","patchDBRPID","deleteDBRPID","DebugAPI","getDebugPprofAllProfiles","getDebugPprofAllocs","getDebugPprofBlock","getDebugPprofCmdline","getDebugPprofGoroutine","getDebugPprofHeap","getDebugPprofMutex","getDebugPprofProfile","getDebugPprofThreadCreate","getDebugPprofTrace","DeleteAPI","postDelete","FlagsAPI","getFlags","HealthAPI","getHealth","LabelsAPI","getLabels","postLabels","getLabelsID","patchLabelsID","deleteLabelsID","LegacyAPI","getLegacyAuthorizations","postLegacyAuthorizations","getLegacyAuthorizationsID","patchLegacyAuthorizationsID","deleteLegacyAuthorizationsID","postLegacyAuthorizationsIDPassword","MeAPI","getMe","putMePassword","MetricsAPI","getMetrics","NotificationEndpointsAPI","getNotificationEndpoints","createNotificationEndpoint","getNotificationEndpointsID","endpointID","putNotificationEndpointsID","patchNotificationEndpointsID","deleteNotificationEndpointsID","getNotificationEndpointsIDLabels","postNotificationEndpointIDLabels","deleteNotificationEndpointsIDLabelsID","NotificationRulesAPI","getNotificationRules","createNotificationRule","getNotificationRulesID","ruleID","putNotificationRulesID","patchNotificationRulesID","deleteNotificationRulesID","getNotificationRulesIDLabels","postNotificationRuleIDLabels","deleteNotificationRulesIDLabelsID","getNotificationRulesIDQuery","OrgsAPI","getOrgs","postOrgs","getOrgsID","orgID","patchOrgsID","deleteOrgsID","getOrgsIDSecrets","patchOrgsIDSecrets","getOrgsIDMembers","postOrgsIDMembers","deleteOrgsIDMembersID","getOrgsIDOwners","postOrgsIDOwners","deleteOrgsIDOwnersID","postOrgsIDSecrets","deleteOrgsIDSecretsID","secretID","PingAPI","getPing","QueryAPI","postQueryAst","getQuerySuggestions","getQuerySuggestionsName","name","postQueryAnalyze","postQuery","ReadyAPI","getReady","RemotesAPI","getRemoteConnections","postRemoteConnection","getRemoteConnectionByID","remoteID","patchRemoteConnectionByID","deleteRemoteConnectionByID","ReplicationsAPI","getReplications","postReplication","getReplicationByID","replicationID","patchReplicationByID","deleteReplicationByID","postValidateReplicationByID","ResourcesAPI","getResources","RestoreAPI","postRestoreKV","postRestoreSQL","postRestoreBucketID","postRestoreBucketMetadata","postRestoreShardId","ScrapersAPI","getScrapers","postScrapers","getScrapersID","scraperTargetID","patchScrapersID","deleteScrapersID","getScrapersIDLabels","postScrapersIDLabels","deleteScrapersIDLabelsID","getScrapersIDMembers","postScrapersIDMembers","deleteScrapersIDMembersID","getScrapersIDOwners","postScrapersIDOwners","deleteScrapersIDOwnersID","ScriptsAPI","getScripts","postScripts","getScriptsID","scriptID","patchScriptsID","deleteScriptsID","postScriptsIDInvoke","SetupAPI","getSetup","postSetup","SigninAPI","postSignin","SignoutAPI","postSignout","SourcesAPI","getSources","postSources","getSourcesID","sourceID","patchSourcesID","deleteSourcesID","getSourcesIDHealth","getSourcesIDBuckets","StacksAPI","listStacks","createStack","readStack","stack_id","updateStack","deleteStack","uninstallStack","TasksAPI","getTasksID","taskID","patchTasksID","deleteTasksID","getTasksIDRuns","postTasksIDRuns","getTasksIDRunsID","runID","deleteTasksIDRunsID","postTasksIDRunsIDRetry","getTasksIDLogs","getTasksIDRunsIDLogs","getTasksIDLabels","postTasksIDLabels","deleteTasksIDLabelsID","getTasksIDMembers","postTasksIDMembers","deleteTasksIDMembersID","getTasksIDOwners","postTasksIDOwners","deleteTasksIDOwnersID","getTasks","postTasks","TelegrafAPI","getTelegrafPlugins","TelegrafsAPI","getTelegrafs","postTelegrafs","getTelegrafsID","telegrafID","putTelegrafsID","deleteTelegrafsID","getTelegrafsIDLabels","postTelegrafsIDLabels","deleteTelegrafsIDLabelsID","getTelegrafsIDMembers","postTelegrafsIDMembers","deleteTelegrafsIDMembersID","getTelegrafsIDOwners","postTelegrafsIDOwners","deleteTelegrafsIDOwnersID","TemplatesAPI","applyTemplate","exportTemplate","UsersAPI","postUsersIDPassword","getUsers","postUsers","getUsersID","patchUsersID","deleteUsersID","VariablesAPI","getVariablesIDLabels","variableID","postVariablesIDLabels","deleteVariablesIDLabelsID","getVariables","postVariables","getVariablesID","putVariablesID","patchVariablesID","deleteVariablesID","WriteAPI","postWrite","FluxScriptInvocationAPI","options","processCSVResponse","invoke","createExecutor","gzip","consumer","send","JSON","stringify"],"mappings":"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"}