import { InfluxDB } from '@influxdata/influxdb-client';
import { RequestOptions } from '../APIBase';
import { Replication, ReplicationCreationRequest, ReplicationUpdateRequest, Replications } from './types';
export interface GetReplicationsRequest {
    /** The organization ID. */
    orgID: string;
    name?: string;
    remoteID?: string;
    localBucketID?: string;
}
export interface PostReplicationRequest {
    /** entity body */
    body: ReplicationCreationRequest;
    /** If true, validate the replication, but don't save it. */
    validate?: any;
}
export interface GetReplicationByIDRequest {
    replicationID: string;
}
export interface PatchReplicationByIDRequest {
    replicationID: string;
    /** entity body */
    body: ReplicationUpdateRequest;
    /** If true, validate the updated information, but don't save it. */
    validate?: any;
}
export interface DeleteReplicationByIDRequest {
    replicationID: string;
}
export interface PostValidateReplicationByIDRequest {
    replicationID: string;
}
/**
 * Replications API
 */
export declare class ReplicationsAPI {
    private base;
    /**
     * Creates ReplicationsAPI
     * @param influxDB - an instance that knows how to communicate with InfluxDB server
     */
    constructor(influxDB: InfluxDB);
    /**
     * List all replications.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetReplications }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getReplications(request: GetReplicationsRequest, requestOptions?: RequestOptions): Promise<Replications>;
    /**
     * Register a new replication.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostReplication }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postReplication(request: PostReplicationRequest, requestOptions?: RequestOptions): Promise<Replication>;
    /**
     * Retrieve a replication.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetReplicationByID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getReplicationByID(request: GetReplicationByIDRequest, requestOptions?: RequestOptions): Promise<Replication>;
    /**
     * Update a replication.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchReplicationByID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    patchReplicationByID(request: PatchReplicationByIDRequest, requestOptions?: RequestOptions): Promise<Replication>;
    /**
     * Delete a replication.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteReplicationByID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteReplicationByID(request: DeleteReplicationByIDRequest, requestOptions?: RequestOptions): Promise<void>;
    /**
     * Validate a replication.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostValidateReplicationByID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postValidateReplicationByID(request: PostValidateReplicationByIDRequest, requestOptions?: RequestOptions): Promise<void>;
}
//# sourceMappingURL=ReplicationsAPI.d.ts.map