import { InfluxDB } from '@influxdata/influxdb-client';
import { RequestOptions } from '../APIBase';
import { ASTResponse, AnalyzeQueryResponse, FluxSuggestion, FluxSuggestions, LanguageRequest, Query } from './types';
export interface PostQueryAstRequest {
    /** Analyzed Flux query to generate abstract syntax tree. */
    body: LanguageRequest;
}
export interface GetQuerySuggestionsRequest {
}
export interface GetQuerySuggestionsNameRequest {
    /** The name of the branching suggestion. */
    name: string;
}
export interface PostQueryAnalyzeRequest {
    /** Flux query to analyze */
    body: Query;
}
export interface PostQueryRequest {
    /** Flux query or specification to execute */
    body: Query;
    /** Name of the organization executing the query. Accepts either the ID or Name. If you provide both `orgID` and `org`, `org` takes precedence. */
    org?: string;
    /** ID of the organization executing the query. If you provide both `orgID` and `org`, `org` takes precedence. */
    orgID?: string;
}
/**
 * Query API
 */
export declare class QueryAPI {
    private base;
    /**
     * Creates QueryAPI
     * @param influxDB - an instance that knows how to communicate with InfluxDB server
     */
    constructor(influxDB: InfluxDB);
    /**
     * Generate an Abstract Syntax Tree (AST) from a query.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostQueryAst }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postQueryAst(request: PostQueryAstRequest, requestOptions?: RequestOptions): Promise<ASTResponse>;
    /**
     * Retrieve query suggestions.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetQuerySuggestions }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getQuerySuggestions(request?: GetQuerySuggestionsRequest, requestOptions?: RequestOptions): Promise<FluxSuggestions>;
    /**
     * Retrieve query suggestions for a branching suggestion.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetQuerySuggestionsName }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getQuerySuggestionsName(request: GetQuerySuggestionsNameRequest, requestOptions?: RequestOptions): Promise<FluxSuggestion>;
    /**
     * Analyze a Flux query.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostQueryAnalyze }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postQueryAnalyze(request: PostQueryAnalyzeRequest, requestOptions?: RequestOptions): Promise<AnalyzeQueryResponse>;
    /**
     * Query data.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostQuery }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postQuery(request: PostQueryRequest, requestOptions?: RequestOptions): Promise<string>;
}
//# sourceMappingURL=QueryAPI.d.ts.map