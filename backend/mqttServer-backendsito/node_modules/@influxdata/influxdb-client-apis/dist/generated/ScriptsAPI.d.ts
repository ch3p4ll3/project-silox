import { InfluxDB } from '@influxdata/influxdb-client';
import { RequestOptions } from '../APIBase';
import { Script, ScriptCreateRequest, ScriptHTTPResponseData, ScriptInvocationParams, ScriptUpdateRequest, Scripts } from './types';
export interface GetScriptsRequest {
    /** The number of scripts to return. */
    limit?: number;
    /** The offset for pagination. */
    offset?: number;
}
export interface PostScriptsRequest {
    /** The script to create. */
    body: ScriptCreateRequest;
}
export interface GetScriptsIDRequest {
    /** The script ID. */
    scriptID: string;
}
export interface PatchScriptsIDRequest {
    /** The script ID. */
    scriptID: string;
    /** Script update to apply */
    body: ScriptUpdateRequest;
}
export interface DeleteScriptsIDRequest {
    /** The ID of the script to delete. */
    scriptID: string;
}
export interface PostScriptsIDInvokeRequest {
    scriptID: string;
    /** entity body */
    body: ScriptInvocationParams;
}
/**
 * Scripts API
 */
export declare class ScriptsAPI {
    private base;
    /**
     * Creates ScriptsAPI
     * @param influxDB - an instance that knows how to communicate with InfluxDB server
     */
    constructor(influxDB: InfluxDB);
    /**
     * List scripts.
     * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/GetScripts }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getScripts(request?: GetScriptsRequest, requestOptions?: RequestOptions): Promise<Scripts>;
    /**
     * Create a script.
     * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/PostScripts }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postScripts(request: PostScriptsRequest, requestOptions?: RequestOptions): Promise<Script>;
    /**
     * Retrieve a script.
     * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/GetScriptsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getScriptsID(request: GetScriptsIDRequest, requestOptions?: RequestOptions): Promise<Script>;
    /**
     * Update a script.
     * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/PatchScriptsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    patchScriptsID(request: PatchScriptsIDRequest, requestOptions?: RequestOptions): Promise<Script>;
    /**
     * Delete a script.
     * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/DeleteScriptsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteScriptsID(request: DeleteScriptsIDRequest, requestOptions?: RequestOptions): Promise<void>;
    /**
     * Invoke a script.
     * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/PostScriptsIDInvoke }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postScriptsIDInvoke(request: PostScriptsIDInvokeRequest, requestOptions?: RequestOptions): Promise<ScriptHTTPResponseData>;
}
//# sourceMappingURL=ScriptsAPI.d.ts.map