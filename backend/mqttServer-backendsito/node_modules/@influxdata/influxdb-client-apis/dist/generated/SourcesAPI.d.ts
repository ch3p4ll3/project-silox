import { InfluxDB } from '@influxdata/influxdb-client';
import { RequestOptions } from '../APIBase';
import { Buckets, HealthCheck, Source, Sources } from './types';
export interface GetSourcesRequest {
    /** The name of the organization. */
    org?: string;
}
export interface PostSourcesRequest {
    /** Source to create */
    body: Source;
}
export interface GetSourcesIDRequest {
    /** The source ID. */
    sourceID: string;
}
export interface PatchSourcesIDRequest {
    /** The source ID. */
    sourceID: string;
    /** Source update */
    body: Source;
}
export interface DeleteSourcesIDRequest {
    /** The source ID. */
    sourceID: string;
}
export interface GetSourcesIDHealthRequest {
    /** The source ID. */
    sourceID: string;
}
export interface GetSourcesIDBucketsRequest {
    /** The source ID. */
    sourceID: string;
    /** The name of the organization. */
    org?: string;
}
/**
 * Sources API
 */
export declare class SourcesAPI {
    private base;
    /**
     * Creates SourcesAPI
     * @param influxDB - an instance that knows how to communicate with InfluxDB server
     */
    constructor(influxDB: InfluxDB);
    /**
     * List all sources.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetSources }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getSources(request?: GetSourcesRequest, requestOptions?: RequestOptions): Promise<Sources>;
    /**
     * Create a source.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostSources }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postSources(request: PostSourcesRequest, requestOptions?: RequestOptions): Promise<Source>;
    /**
     * Retrieve a source.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetSourcesID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getSourcesID(request: GetSourcesIDRequest, requestOptions?: RequestOptions): Promise<Source>;
    /**
     * Update a Source.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchSourcesID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    patchSourcesID(request: PatchSourcesIDRequest, requestOptions?: RequestOptions): Promise<Source>;
    /**
     * Delete a source.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteSourcesID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteSourcesID(request: DeleteSourcesIDRequest, requestOptions?: RequestOptions): Promise<void>;
    /**
     * Get the health of a source.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetSourcesIDHealth }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getSourcesIDHealth(request: GetSourcesIDHealthRequest, requestOptions?: RequestOptions): Promise<HealthCheck>;
    /**
     * Get buckets in a source.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetSourcesIDBuckets }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getSourcesIDBuckets(request: GetSourcesIDBucketsRequest, requestOptions?: RequestOptions): Promise<Buckets>;
}
//# sourceMappingURL=SourcesAPI.d.ts.map