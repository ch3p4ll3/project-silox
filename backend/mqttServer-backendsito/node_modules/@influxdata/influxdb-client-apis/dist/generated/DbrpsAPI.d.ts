import { InfluxDB } from '@influxdata/influxdb-client';
import { RequestOptions } from '../APIBase';
import { DBRP, DBRPCreate, DBRPGet, DBRPUpdate, DBRPs } from './types';
export interface GetDBRPsRequest {
    /** Specifies the organization ID to filter on */
    orgID?: string;
    /** Specifies the organization name to filter on */
    org?: string;
    /** Specifies the mapping ID to filter on */
    id?: string;
    /** Specifies the bucket ID to filter on */
    bucketID?: string;
    /** Specifies filtering on default */
    default?: any;
    /** Specifies the database to filter on */
    db?: string;
    /** Specifies the retention policy to filter on */
    rp?: string;
}
export interface PostDBRPRequest {
    /** The database retention policy mapping to add */
    body: DBRPCreate;
}
export interface GetDBRPsIDRequest {
    /** The database retention policy mapping ID */
    dbrpID: string;
    /** Specifies the organization ID of the mapping */
    orgID?: string;
    /** Specifies the organization name of the mapping */
    org?: string;
}
export interface PatchDBRPIDRequest {
    /** The database retention policy mapping. */
    dbrpID: string;
    /** Database retention policy update to apply */
    body: DBRPUpdate;
    /** Specifies the organization ID of the mapping */
    orgID?: string;
    /** Specifies the organization name of the mapping */
    org?: string;
}
export interface DeleteDBRPIDRequest {
    /** The database retention policy mapping */
    dbrpID: string;
    /** Specifies the organization ID of the mapping */
    orgID?: string;
    /** Specifies the organization name of the mapping */
    org?: string;
}
/**
 * Dbrps API
 */
export declare class DbrpsAPI {
    private base;
    /**
     * Creates DbrpsAPI
     * @param influxDB - an instance that knows how to communicate with InfluxDB server
     */
    constructor(influxDB: InfluxDB);
    /**
     * List database retention policy mappings.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDBRPs }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getDBRPs(request?: GetDBRPsRequest, requestOptions?: RequestOptions): Promise<DBRPs>;
    /**
     * Add a database retention policy mapping.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostDBRP }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postDBRP(request: PostDBRPRequest, requestOptions?: RequestOptions): Promise<DBRP>;
    /**
     * Retrieve a database retention policy mapping.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetDBRPsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getDBRPsID(request: GetDBRPsIDRequest, requestOptions?: RequestOptions): Promise<DBRPGet>;
    /**
     * Update a database retention policy mapping.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchDBRPID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    patchDBRPID(request: PatchDBRPIDRequest, requestOptions?: RequestOptions): Promise<DBRPGet>;
    /**
     * Delete a database retention policy.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteDBRPID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteDBRPID(request: DeleteDBRPIDRequest, requestOptions?: RequestOptions): Promise<void>;
}
//# sourceMappingURL=DbrpsAPI.d.ts.map